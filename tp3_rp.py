# -*- coding: utf-8 -*-
"""TP3_RP.ipynb

Automatically generated by Colaboratory.


# **KOULAL Yidhir Aghiles**
# **LABCHRI AMAYAS**
# **G1 Master 1 IV**
# **TP3 (MinMax, NegaMax, AlphaBeta)**
"""

import numpy as np

"""**La Liste des noeuds**"""

L= [15,6,3,12,42,45,42,39,-9,66,27,36,33,30,61,60]

"""**MinMax**"""

def MinMax(L,tour):
  if(len(L)==1):
    print("MinMax = ",L.pop())
  else:
    Ltemp=[]
    i=0
    while(i < (len(L)-1)):
      if(tour=="max"):
        val = np.min(L[i:i+2])
        Ltemp.append(val)
        i=i+2
      else:
        val = np.max(L[i:i+2])
        Ltemp.append(val)
        i=i+2
    print(tour," = ",L)
    if(tour=="max"):
      MinMax(Ltemp,"min")
    else:
      MinMax(Ltemp,"max")

MinMax(L,"max")
MinMax(L,"min")

"""**NegaMax**"""

def Convert(lst): 
    return [ -i for i in lst ]


def NegaMax(L,tour,f):
  if(f==False):
    if(tour=="min"):
      # F(ni) = -G(ni) car noeud terminaux sont de type min
      L=Convert(L)
      
  
  print(" L = ",L)
  if(len(L)==1):
    nm=L.pop()
    if(nm<0):
      nm=-nm
    print("NegaMax = ",nm)
  else:
      Ltemp=[]
      i=0
      L=Convert(L)
      while(i < (len(L)-1)):
        val = np.max(L[i:i+2])
        Ltemp.append(val)
        i=i+2

      NegaMax(Ltemp,"",True)

NegaMax(L,"max",False)
NegaMax(L,"min",False)

MAX, MIN = float('+inf'), float('-inf')

"""**AlphaBeta**"""
def AlphaBeta(ProfendeurArbre, IndexArbre, tour, L, alpha, beta):
  #Condition d'arret
  if ProfendeurArbre == 4:
    return L[IndexArbre]
  

  # Voir le tour

  if tour =="max":
    #On veut maximiser
    mp = MIN
    #Calcul du max provisioir pour les deux fils du pere
    for i in range(0, 2):
      valp = AlphaBeta(ProfendeurArbre + 1 , IndexArbre * 2 + i, "min",L,alpha, beta)
      mp = max(valp,mp)
      alpha = max(alpha, mp)
      #Si le alpha est superieur Ã  beta on ne le prend pas et on ne regrade meme pas l'autre fils
      if alpha >= beta:
        break
    return mp
  else:
    #On veut minimiser
    mp = MAX
    for i in range(0,2):
      valp = AlphaBeta(ProfendeurArbre + 1 , IndexArbre * 2 + i, "max",L,alpha, beta)
      mp = min(valp,mp)
      beta = min(beta, mp) 
      
      if alpha >= beta:
        break
    return mp

AlphaBeta(0,0,"max",L,MIN,MAX)

AlphaBeta(0,0,"min",L,MIN,MAX)